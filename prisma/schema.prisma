generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model EmergencyContact {
  id                Int      @id @default(autoincrement())
  person_id         Int?
  name              String   @db.VarChar(100)
  residential_phone String?  @db.VarChar(20)
  cellphone         String   @db.VarChar(20)
  relationship      String   @db.VarChar(100)
  address           String?  @db.VarChar(255)
  person            clients? @relation(fields: [person_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "emergency_contact_ibfk_1")

  @@index([person_id], map: "person_id")
  @@map("emergency_contact")
}

model Insurance {
  id                               Int      @id @default(autoincrement())
  person_id                        Int?
  has_assurance                    Boolean
  ars_name                         String?  @db.VarChar(100)
  ars_cardholder                   String?  @db.VarChar(100)
  ars_primary_insured              String?  @db.VarChar(100)
  ars_plan                         String?  @db.VarChar(100)
  ars_contract_number              String?  @db.VarChar(50)
  ars_primary_insured_relationship String?  @db.VarChar(50)
  person                           clients? @relation(fields: [person_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "insurance_ibfk_1")

  @@index([person_id], map: "person_id")
  @@map("insurance")
}

model Visits {
  id         Int     @id @default(autoincrement())
  patient_id Int
  visit_date String? @db.VarChar(50)
  reason     String  @db.VarChar(255)
  diagnosis  String? @db.VarChar(255)
  treatment  String? @db.VarChar(255)
  status     Int     @default(0)
  person     clients @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "visits_ibfk_1")

  @@index([patient_id], map: "patient_id")
  @@map("visits")
}

model account_admin {
  id            Int      @id @default(autoincrement())
  account_id    Int
  admin_id      Int
  account_owner Int
  accounts      accounts @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "account_admin_ibfk_1")
  clients       users    @relation(fields: [admin_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "account_admin_ibfk_2")

  @@index([account_id], map: "account_admin_ibfk_1")
  @@index([admin_id], map: "account_admin_ibfk_2_idx")
}

model account_client {
  id         Int      @id @default(autoincrement())
  account_id Int
  client_id  Int
  accounts   accounts @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "account_client_ibfk_1")
  clients    clients  @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "account_client_ibfk_2")

  @@index([client_id], map: "account_client_ibfk_2")
  @@index([account_id], map: "account_client_ibfk_1")
}

model accounts {
  id             Int              @id @default(autoincrement())
  name           String?          @db.VarChar(255)
  created_at     String?          @db.VarChar(40)
  admin_id       Int?
  account_key    String           @unique(map: "account_key_UNIQUE") @default(uuid()) @db.VarChar(50)
  account_admin  account_admin[]
  account_client account_client[]
  users          users?           @relation(fields: [admin_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "accounts_ibfk_1")

  @@index([admin_id], map: "accounts_ibfk_1_idx")
}

model clients {
  id                Int                     @id @default(autoincrement())
  first_name        String                  @db.VarChar(100)
  last_name         String                  @db.VarChar(100)
  age               Int
  gender            clients_gender
  marital_status    clients_marital_status?
  birth_date        String                  @db.VarChar(150)
  birth_place       String?                 @db.VarChar(150)
  nationality       String?                 @db.VarChar(100)
  religion          String?                 @db.VarChar(100)
  occupation        String?                 @db.VarChar(100)
  document_id       String                  @db.VarChar(50)
  address           String?                 @db.VarChar(255)
  residential_phone String?                 @db.VarChar(20)
  cellphone         String                  @db.VarChar(20)
  created_at        String?                 @db.VarChar(45)
  client_number     String?                 @unique(map: "client_number_UNIQUE") @db.VarChar(10)
  account_client    account_client[]
  emergency_contact EmergencyContact[]
  insurance         Insurance[]
  visits            Visits[]
}

model users {
  id            Int             @id @default(autoincrement())
  first_name    String?         @db.VarChar(50)
  last_name     String?         @db.VarChar(50)
  email         String?         @unique(map: "email_UNIQUE") @db.VarChar(255)
  created_at    String?         @db.VarChar(40)
  account_admin account_admin[]
  accounts      accounts[]
}

enum clients_gender {
  male
  female
}

enum clients_marital_status {
  single
  married
  divorced
  widowed
  minor
}
